<?xml version="1.0" encoding="utf-8"?>


<!--
Antes do .Net FrameWork, COM (Component Object Model) era predominante, mas aconteciam problemas chamados "DLL hell"
Não haviam registos de versão, e quando eram atualizados, muitos softwares que dependiam das DLLs podiam deixar de funcionar.

Assembly continuam com a extenão DLL (Dynamic Link Library) elas são autonomas e são de linguagem neutra, são suportadas em qualquer linguagem .Net

Existem dois tipos:
Regular Assbly: Visual Studio gera por padrão, contem manifest, metadata, header.
Strong Named Assbly: Identica a Regular, mas contem uma chave privada e uma pública (o que pode impedir de ser utilizada como referencia se build se não tiver a private key).

GAC - Global Assembly Cache (Instala uma assembly no GAC, usando o GAC util em dev ou Windows Installer em Produção)
É lá que ficam apenas as strong named assemblies, mas é preciso ter certeza, geralmente a assmebly pode ser usada por multiplas aplicações quando instalada na Store
CLR pesquisa no GAC por assemblies. 
Uma strong named assembly só pode ser referenciada por outra strong named assembly


O versionamento de assemblies tem o seguinte formado: Major . Minor . Build Number . Revision
OBS: Existe versão do arquivo e versão do assembly no AssemblyInfo.cs

Existem 3 arquivos de configuração de assembly: App/Web Config, Publihser Policy e Machine Config
-->



<configuration>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">

      <!--
      Publisher Policy no GAC para a CLR usar a nova versão, sempre que procurar vai substituir
      -->
      <dependetAssembly name="myAssbly" 
                        publicKeyToken="as1d65as1f6sd1f6s">
        
        <bindingRedirect oldVersion="1.0.0.0"
                         newVersion="2.0.0.0"/>
      </dependetAssembly>

      <!--
      probing é um novo local apra a CLR procurar assembly no App/Web Config (somente caminhos relativos ao local da aplicação)
      É possivel usar também o codebase para especificar um local na rede, ou na internet. (são salvas numa pasta no GAC)
      Assembly que não estão na pasta local da aplicação devem ser Strong Named.
      -->     
      <probing privatePath="C:\Local" />

      <codeBase version="1.0.0.0" 
                href="www.google.com"/>
      
      </assemblyBinding>

    <!--
      WinRT = API criado para app a partir do Windows 8 que usam sistema ARM e Metro Style, embarcados (que utilizam JavaScript para criar apps nativos, WPF)       
      WinMD - Windows MetaData - fica na pasta system o mapeamento entre componentes nativos e outras linguagens para WinRT.
      (mapea metodos do .NetFramework (avisando quando esta obsoleto por exemplo)
      
      Visual Studio usa esses arquivos para o IntelliSense, avisando que os parametros de todos metodos foram preenchidos, por exemplo.
      -->
    
  </runtime>
</configuration>



